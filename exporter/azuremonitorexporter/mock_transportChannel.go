// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.40.1. DO NOT EDIT.

package azuremonitorexporter

import (
	contracts "github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockTransportChannel is an autogenerated mock type for the transportChannel type
type mockTransportChannel struct {
	mock.Mock
}

// Close provides a mock function with given fields: retryTimeout
func (_m *mockTransportChannel) Close(retryTimeout ...time.Duration) <-chan struct{} {
	_va := make([]interface{}, len(retryTimeout))
	for _i := range retryTimeout {
		_va[_i] = retryTimeout[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func(...time.Duration) <-chan struct{}); ok {
		r0 = rf(retryTimeout...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Send provides a mock function with given fields: _a0
func (_m *mockTransportChannel) Send(_a0 *contracts.Envelope) {
	_m.Called(_a0)
}

// newTransportChannel creates a new instance of mockTransportChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newTransportChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTransportChannel {
	mock := &mockTransportChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
